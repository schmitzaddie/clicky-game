{"version":3,"sources":["component/Navbar.js","component/Jumbotron.js","component/Card/Card.js","component/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CustomNavbar","props","react_default","a","createElement","Navbar_default","bg","variant","Brand","href","Toggle","Collapse","className","Text","score","highScore","MyJumbotron","src","MyCard","onClick","count","id","alt","name","image","Wrapper","children","App","state","cards","clicked","_this","indexOf","updatedArray","concat","Object","toConsumableArray","handleScore","setState","handleReset","userScore","randomImage","shuffleImage","arr","i","length","j","Math","floor","random","_ref","_this2","this","console","log","component_Wrapper","component_Navbar","Jumbotron","map","card","Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5378536.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nfunction CustomNavbar(props) {\n    return (\n        <div>\n            <Navbar bg=\"dark\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">Clicky Game</Navbar.Brand>\n                <Navbar.Toggle />\n                <Navbar.Collapse className=\"justify-content-center\">\n                    <Navbar.Text>\n                        Score: {props.score} | High Score: {props.highScore}\n                    </Navbar.Text>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default CustomNavbar;","import React from \"react\";\n\nfunction MyJumbotron(props) {\n    return (\n        <div className=\"jumbotron jumbotron-fluid text-center text-black bg-black\">\n            <div className=\"container\">\n                <img src=\"https://data.whicdn.com/images/101741280/large.png\"></img>\n                <p className=\"lead\">Click on a Friend image below to start earing points! Clicking on a Friend more than once will restart the game. Good luck!</p>\n            </div>\n        </div>\n    )\n}\n\nexport default MyJumbotron;","import React from \"react\";\nimport \"./Card.css\";\n\nfunction MyCard(props) {\n    return (\n        <div className=\"cards\" onClick={() => props.count(props.id)}>\n        <div className=\"img-container\">\n            <img alt={props.name} src={props.image} />\n        </div>\n        </div>\n    )\n}\n\nexport default MyCard;","import React from \"react\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport Navbar from \"./component/Navbar\";\nimport Jumbotron from \"./component/Jumbotron\";\nimport Card from \"./component/Card/Card\";\nimport Wrapper from \"./component/Wrapper\";\nimport cards from \"./cards.json\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score: 0,\n    highScore: 0,\n    clicked: []\n  };\n\n  count = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      const updatedArray = [...this.state.clicked, (id)];\n      this.handleScore();\n      this.setState({ clicked: updatedArray });\n    } else {\n      this.handleReset();\n    }\n  }\n\n  handleScore = () => {\n    const userScore = this.state.score + 1;\n    this.setState({\n      score: userScore\n    })\n    if (userScore > this.state.highScore) {\n      this.setState({ highScore: userScore });\n    }\n    this.randomImage();\n  }\n\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      highScore: this.state.highScore,\n      clicked: []\n    })\n    this.randomImage();\n  }\n\n  randomImage = () => {\n    let shuffleImage = function (arr) {\n      for (let i = arr.length - 1; i >0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n      return arr;\n    }\n    shuffleImage = shuffleImage(cards);\n    this.setState({ cards: shuffleImage });\n  }\n  render() {\n    console.log(this.state.clicked)\n    return (\n      <Wrapper>\n        <div>\n          <Navbar score={this.state.score} highScore={this.state.highScore} />\n          < Jumbotron />\n          {this.state.cards.map(card => (\n            <Card\n              key={card.id}\n              count={this.count}\n              handleScore={this.handleScore}\n              handleReset={this.handleReset}\n              randomImage={this.randomImage}\n              id={card.id}\n              image={card.image}\n            />\n          ))}\n        </div>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}